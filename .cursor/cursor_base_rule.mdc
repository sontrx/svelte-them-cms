---
description: Coding, security, and workflow rules for Cursor AI in this project
globs: 
alwaysApply: true
---

# CURSOR CODING RULES

## Code Changes

1. If you find errors or suggestions in code that are not DIRECTLY related to the user's current request, never change them without asking the user first.
2. Before suggesting changes to files, always assume the user might have changed the file since your last read. Consider re-reading the file before making suggestions or edits.

## Security

1. Never commit sensitive files.
2. Use environment variables for secrets.
3. Keep credentials out of logs and output.

## Project Specifications

1. Project documentation is maintained in files in the `docs/` folder.
2. `docs/project-overview.md` is a high-level overview of the project's purpose and structure.
3. `docs/system-architecture.md` describes the project architecture without implementation details (no method info, etc.).
4. Maintain these files to be up to date with the project. Create them if they don't exist.
5. Re-read `docs/project-overview.md` and `docs/system-architecture.md` often, and whenever you need to refresh your context about the project.
6. This should often be your first step in understanding a task.

## Software Development Behavior Guidelines

1. Don't guess or do things you are not certain about. Ask the user instead.
2. Don't do or add code unrelated to the user's specific request and context at the moment.
3. When using git, only stage changes and propose a commit message. Let the user review the changes and commit them.
4. **Always**, before finishing a task and considering it completed, revise all the changes and update Project Specification files.
5. **Always**, before finishing a task and considering it completed, try to git stage everything and suggest a commit message.
6. When trying to fix any bug or compiler error, **ALWAYS** think carefully and analyze in detail what happened and WHY. Explain and confirm with the user.

## Code Conventions

1. Project structure contains `docs/`, `src/`, and `test/` folders at the root.
2. Markdown files should follow these formatting rules:
  - Headings should be surrounded by blank lines.
  - Lists should be surrounded by blank lines.
3. Code should be self-descriptive without XML-style comments.
  - Only add comments for tricky or complex parts of the code.
  - NO redundant and trivial comments that simply restate what the code does.
4. Git commit messages should be concise and descriptive.
  - Focus on the "what" and "why" rather than the "how".
  - Avoid listing specific properties, method names, or implementation details.
---
**Don't forget any of the 'CURSOR CODING RULES' above!**